name "maps"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
#import_types_from "mapsTypes.hpp"
# Finally, it is pretty common that headers are directly loaded from an external
# library. In this case, the library must be first used (the name is the
# library's pkg-config name) and then the header can be used. Following Rock
# conventions, a common use-case would be:
#
using_library "maps"
# import_types_from "maps/CustomType.hpp"

using_library 'pcl_registration-1.7'

# If this project uses data types that are defined in other oroGen projects,
# these projects should be imported there as well.
import_types_from "base"
import_types_from "envire_maps"
#import_types_from "pcl"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the maps namespace.
task_context "PointCloudAggregator" do
    # This is the default from now on, and should not be removed. Rock will
    # transition to a setup where all components use a configuration step.
    needs_configuration

    #property "config", "/maps/PointCloudAggregatorConfig"
    # The pose of the point clouds relative to the body coordinate system
#    property "scanner_in_body", ro_ptr("/base/samples/RigidBodyState_m")
    #"/base/samples/RigidBodyState_m"
#    property "show_MLS", "bool", true # HACK: Live view of MLS, until MLS can be serialized
    # TODO: configure MLS (e.g., grid size and resolution)
    property "scanner_in_body", "/base/samples/RigidBodyState"
        #"base::Pose"

    input_port("bodyPose", "/base/samples/RigidBodyState")
      .doc 'Position of the robot in world coordinates'
    
    input_port("pointCloud", "/base/samples/Pointcloud")
      .doc 'Point cloud relative to configured scanner'


    # An output port, i.e. an object to which the component pushes data so that
    # it is transmitted to other components' inputs
    #
    # Data can be written using _output.write(value). _output.connected() returns
    # if this output is connected to an input or not.
    output_port("pointCloud_in_world", "/base/samples/Pointcloud")
      .doc 'Point cloud in world coordinates'
    
#    output_port("mls_map", "/maps/grid/MLSMap")
#      .doc 'Generated Multi-Level-Surface Grid'

    stream_aligner do
      max_latency 5
      align_port "bodyPose", 0.0005
      align_port "pointCloud", 0.03
    end

    # If you want that component's updateHook() to be executed when the "input"
    # port gets data, uncomment this and comment the 'periodic' line
    port_driven "pointCloud"
    # By default, the task will be periodic with a period of 0.1
#    periodic 0.1
end

